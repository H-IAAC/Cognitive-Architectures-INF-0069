########  AVOID BRICK  ###########

# This operator will make the agent avoid the brick
# Propose*avoid*brick:
sp {propose*avoidBrick
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^TYPE <type> << BRICK DELIVERY >>)
   (<entity> ^DISTANCE <distance> <= 75)      
-->
   (<s> ^operator <o> +)     
   (<o> ^name avoidBrick)
   (<o> ^parameter <distance>
        ^type <type>)
   (<o> ^actions.MOVE <command>)
   (<command> ^Vel -0.5
              ^VelR 0
              ^VelL -5)
}
      
     
# Apply*avoidBrick:
# If the move operator is selected, then generate an output command to it 
#sp {apply*avoidBrick
#   (state <s> ^operator <o>
#              ^io <io>)
#   (<o> ^name avoidBrick)
#   (<o> ^parameter <distance>)              
#   (<io> ^output-link <ol>)
#-->
#   (<ol> ^MOVE <command>)
#   (<command> ^Vel  -0.5)
#   (<command> ^VelR 0)
#   (<command> ^VelL -5)}

##Remove the entity from memory
#sp {apply*avoidBrick*remove*entity*memory
#(state <s> ^operator <o>
#           ^io.input-link <il>)
#(<o> ^name avoidBrick)
#(<o> ^entityName <entityName>)
#(<il> ^CREATURE <creature>)
#(<creature> ^MEMORY <memory>)
#(<memory> ^COUNT <quantity>)
#(<memory> ^ENTITY <entityInMemory>)           
#(<entityInMemory> ^NAME <name> <entityName>)
#-->
#(<memory> ^ENTITY <entityInMemory> -)
#(<memory> ^COUNT <quantity> -
#          ^COUNT (- <quantity> 1))}             
                      
# Apply*avoidBrick*remove-move:
# If the avoidBrick operator is selected,
# and there is a completed move command on the output link,
# then remove that command.   
#sp {apply*avoidBrick*remove-move
#(state <s> ^operator.name avoidBrick
#           ^io.output-link <out>)
#(<out> ^MOVE <move>)
#(<move> ^status complete)
#-->
#(<out> ^MOVE <move> -)} 
#########  DELIVER LEAFLET  ###########

# This operator will make the agent deliver a leaflet at a delivery spot when completed

sp {propose*deliver*leaflet
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^TYPE DELIVERY) 
   (<entity> ^DISTANCE <dsDist> < 130)
   (<creature> ^LEAFLETS.LEAFLET <l>)
   (<l> ^COMPLETED YES
        ^DELIVERED NO
        ^ID <lID>
        ^SCORE <score>)
#   (<creature> ^MEMORY.ENTITY.NAME <memoryItemName> <foodName>)     
-->
   (<s> ^operator <o> +)
   (<o> ^name deliverLeaflet)
   (<o> ^parameter <leaflet>)
   (<leaflet> ^SCORE <score>)
   (<o> ^actions.DELIVER <command>)
   (<command> ^Id <lID>)
}

#sp {apply*deliver*leaflet
#   (state <s> ^operator <o>
#              ^io <io>)  
#   (<io> ^output-link <ol>)
#   (<o> ^name deliverLeaflet)
#   (<o> ^parameter.ID <lID>)
#   - (<ol> ^DELIVER <something>)
#-->
#   (<ol> ^DELIVER <command>)
#   (<command> ^Id <lID>)
#   #(halt)
#}
#
#sp {apply*deliverLeaflet*remove-deliver
#   (state <s> ^operator <o>
#              ^io.output-link <out>)
#   (<o> ^name deliverLeaflet)
#   (<out> ^DELIVER <deliver>)
#   (<deliver> ^status complete)
#-->
#   (<out> ^DELIVER <deliver> -)
#}
#
#########  EAT FOOD  ###########

# This operator will make the agent eat the food

# Propose*eat*food:
sp {propose*eat*food
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^TYPE FOOD)
   (<entity> ^DISTANCE <foodDistance> < 50)
   (<entity> ^NAME <foodName>)
#   (<creature> ^MEMORY.ENTITY.NAME <memoryItemName> <foodName>)
-->
   (<s> ^operator <o> +)
   (<o> ^name eatFood)
   (<o> ^parameter <food>)
   (<food> ^DISTANCE <foodDistance>)
   (<o> ^actions.EAT <command>)
   (<command> ^Name <foodName>)}
   
# Apply*eat*food:
# If the move operator is selected, then generate an output command to it
#sp {apply*eat*food
#   (state <s> ^operator <o>
#              ^io <io>)
#   (<io> ^input-link <il>)
#   (<io> ^output-link <ol>)
#   (<o> ^name eatFood)
#   (<o> ^parameter.NAME <foodName>)
#  - (<ol> ^EAT <something>)
#-->
#   (<ol> ^EAT <command>)
#   (<command> ^Name <foodName>)
#   #(halt)
#}
  
  
  
#------------------------------------------------------------------------------------------------------------------------------------------

## Apply*eat*food*remove-mem
## If the eat operator is selected and the food been eaten is in the memory, remove it form memory
#sp {apply*eat*food*remove-memory
#   (state <s> ^operator <o>
#              ^io <io>)
#   (<io> ^input-link <il>)
#   (<io> ^output-link <ol>)
#   (<o> ^name eatFood)
#   (<o> ^parameter.NAME <foodName>)
#   (<il> ^CREATURE <creature>)
#   (<creature> ^MEMORY <memory>)
#   (<memory> ^COUNT <quantity>)
#   (<memory> ^ENTITY <memoryEntity>)
#   (<memoryEntity> ^NAME <memoryEntityName> <foodName>)
#-->
#   (<memory> ^COUNT <quantity> -
#             ^COUNT (- <quantity> 1))
#   (<memory> ^ENTITY <memoryEntity> -)
#   #(halt)
#}

#------------------------------------------------------------------------------------------------------------------------------------------
  
  
  
# Apply*eat*remove-move:
# If the eatFood operator is selected,
# and there is a completed move command on the output link,
# then remove that command.
#sp {apply*eatFood*remove-eat
#   (state <s> ^operator <o>
#              ^io.output-link <out>)
#   (<o> ^name eatFood)
#   (<o> ^parameter.name <foodName>)
#   (<out> ^EAT <eat>)
#   (<eat> ^status complete)
#-->
#   (<out> ^EAT <eat> -)}
############  GET JEWEL  ###########

# This operator will make the agent get the jewel

# Propose*get*jewel:
sp {propose*get*jewel
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL.ENTITY <entity>)
   (<entity> ^TYPE JEWEL) 
   (<entity> ^DISTANCE <jewelDistance> < 50)
   (<entity> ^NAME <jewelName>)
#   (<creature> ^MEMORY.ENTITY.NAME <memoryItemName> <jewelName>)     
-->
   (<s> ^operator <o> +)
   (<o> ^name getJewel)
   (<o> ^parameter <jewel>)
   (<jewel> ^DISTANCE <jewelDistance>)
   (<o> ^actions.GET <command>)
   (<command> ^Name <jewelName>)
}
   
# Apply*get*jewel:
# If the move operator is selected, then generate an output command to it 
#sp {apply*get*jewel
#   (state <s> ^operator <o>
#              ^io <io>)
#   (<io> ^input-link <il>)      
#   (<io> ^output-link <ol>)
#   (<o> ^name getJewel)
#   (<o> ^parameter.NAME <jewelName>)
#   - (<ol> ^GET <anything>)   # Colocado por Ricardo
#-->
#   (<ol> ^GET <command>)
#   (<command> ^Name <jewelName>)
#   #(halt)
#}
  
  
#------------------------------------------------------------------------------------------------------------------------------------------
#
#sp {apply*get*jewel*remove-memory
#   (state <s> ^operator <o>
#              ^io <io>)
#   (<io> ^input-link <il>)      
#   (<io> ^output-link <ol>)
#   (<o> ^name getJewel)
#   (<o> ^parameter.NAME <jewelName>)
#   (<il> ^CREATURE <creature>) 
#   (<creature> ^MEMORY <memory>)
#   (<memory> ^COUNT <quantity>)  
#   (<memory> ^ENTITY <memoryEntity>)
#   (<memoryEntity> ^NAME <memoryEntityName> <jewelName>)
#-->
#   (<memory> ^COUNT <quantity> -
#             ^COUNT (- <quantity> 1))
#   (<memory> ^ENTITY <memoryEntity> -)
#   #(halt)
#}
#------------------------------------------------------------------------------------------------------------------------------------------
  
  
# Apply*get*remove-move:
# If the getJewel operator is selected,
# and there is a completed move command on the output link,
# then remove that command.   
#sp {apply*getJewel*remove-get
#(state <s> ^operator <o>            
#           ^io.output-link <out>)
#(<o> ^name getJewel)
#(<o> ^parameter.name <jewelName>)
#(<out> ^GET <move>)
#(<move> ^status complete)
#-->
#(<out> ^GET <move> -)} 

#########  MOVE TO DELIVERY SPOT  ##########

# This operator will make the agent go to the delivery spot when a leaflet is completed

sp {reativo*propose*move_delivery
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<creature> ^LEAFLETS.LEAFLET <l>)
   (<l> ^COMPLETED YES
        ^DELIVERED NO)
   (<memory> ^ENTITY <entityInMemory>)
   (<entityInMemory> ^TYPE DELIVERY)
   (<entityInMemory> ^X <dsPosX>)
   (<entityInMemory> ^Y <dsPosY>)
-->
   (<s> ^operator <o> +)
   (<o> ^name moveDelivery)
   (<o> ^actions.MOVE <command>)
   (<command> ^Vel 1
              ^VelR 1
              ^VelL 1
              ^X <dsPosX>
              ^Y <dsPosY>)
}


#sp {apply*move_delivery
#   (state <s> ^operator <op>
#              ^io.output-link <out>)
#   (<op> ^name moveDelivery
#         ^X <posX>
#         ^Y <posY>)
#-->
#   (<out> ^MOVE <command>)
#   (<command> ^Vel 1)
#   (<command> ^VelR 1)
#   (<command> ^VelL 1)
#   (<command> ^X <posX>)
#   (<command> ^Y <posY>)
#}
#
#
#  
#sp {apply*move_delivery*remove-move
#   (state <s> ^operator.name moveDelivery
#              ^io.output-link <out>)
#   (<out> ^MOVE <move>)
#   (<move> ^status complete)
#-->
#   (<out> ^MOVE <move> -)
#}
#########  MOVE FOOD  ##########

# This operator will make the agent go straight to the food

# Propose*move*food:
sp {propose*move*food
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<creature> ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <creaturePositionX>)
   (<creaturePosition> ^Y <creaturePositionY>)
   (<entityInMemory> ^TYPE FOOD)
   (<entityInMemory> ^X <entityInMemoryPositionX>)
   (<entityInMemory> ^Y <entityInMemoryPositionY>)
   (<entityInMemory> ^NAME <entityInMemoryName>) 
   (<creature> ^PARAMETERS.MINFUEL <minFuel>) 
-->
   (<s> ^operator <o> +)
   (<o> ^name moveFood)
   (<o> ^parameter <food>)
   (<food> ^distance (sqrt (+ (* (- <creaturePositionX> <entityInMemoryPositionX>) (- <creaturePositionX> <entityInMemoryPositionX>)) (* (- <creaturePositionY> <entityInMemoryPositionY>) (- <creaturePositionY> <entityInMemoryPositionY>)))))
   (<food> ^NAME <entityInMemoryName>)
   (<o> ^parameterFuel <minFuel>)
   (<o> ^actions.MOVE <command>)
   (<command> ^Vel 1
              ^VelR 1
              ^VelL 1
              ^X <entityInMemoryPositionX>
              ^Y <entityInMemoryPositionY>)
}
   
# Apply*move*food:
# If the move operator is selected, then generate an output command to it 
#sp {apply*move*food
#   (state <s> ^operator <o>
#              ^io <io>)
#   (<io> ^input-link <il>)             
#   (<io> ^output-link <ol>)
#   (<o> ^name moveFood)
#   (<o> ^parameter <food>)
#   (<food> ^X <x>)
#   (<food> ^Y <y>)
#   (<food> ^NAME <entityInMemoryName>)
#   (<il> ^CREATURE <creature>)
#   (<creature> ^MEMORY <memory>)
#   (<memory> ^ENTITY <entityInMemory>)
#   (<entityInMemory> ^NAME <entityInMemoryName>)
#-->
#   (<ol> ^MOVE <command>)
#   (<command> ^Vel 1)
#   (<command> ^VelR 1)
#   (<command> ^VelL 1)
#   (<command> ^X <x>)
#   (<command> ^Y <y>)
#   #(halt)
#}
#  
## Apply*moveFood*remove-move:
## If the moveFood operator is selected,
## and there is a completed move command on the output link,
## then remove that command.   
#sp {apply*moveFood*remove-move
#(state <s> ^operator.name moveFood
#           ^io.output-link <out>)
#(<out> ^MOVE <move>)
#(<move> ^status complete)
#-->
#(<out> ^MOVE <move> -)}   
#
##Remove the food from memory because it is not there anymore 
#sp {apply*moveFood*remove*food
#(state <s> ^operator <o>
#           ^io.input-link <il>)
#(<o> ^name moveFood)
#(<o> ^parameter <food>)
#(<food> ^X <x>)
#(<food> ^Y <y>)
#(<il> ^CREATURE <creature>)
#(<creature> ^MEMORY <memory>)
#(<memory> ^ENTITY <entityInMemory>) 
#(<memory> ^COUNT <quantity>)
#(<entityInMemory> ^X <x>)
#(<entityInMemory> ^Y <y>)      
#-(<creature> ^SENSOR.VISUAL.ENTITY.X <entityX> <x>)
#-(<creature> ^SENSOR.VISUAL.ENTITY.Y <entityY> <y>)
#-->
#(<memory> ^ENTITY <entityInMemory> -)
#(<memory> ^COUNT <quantity> -
#          ^COUNT (- <quantity> 1))}  
##########  MOVE JEWEL  ############

# This operator will make the agent go straight to the jewel

# Propose*move*jewel:
sp {propose*move*jewel
   (state <s> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<creature> ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <creaturePositionX>)
   (<creaturePosition> ^Y <creaturePositionY>)
   (<entityInMemory> ^TYPE JEWEL)
   (<entityInMemory> ^X <entityInMemoryPositionX>)
   (<entityInMemory> ^Y <entityInMemoryPositionY>)
   (<entityInMemory> ^NAME <entityInMemoryName>)
   (<entityInMemory> ^COLOR <entityInMemoryColor>)
   #(<creature> ^LEAFLETS.LEAFLET.<entityInMemoryColor>.MISSING > 0)
-->
   (<s> ^operator <o> +)
   (<o> ^name moveJewel)
   (<o> ^parameter <jewel>)
   (<jewel> ^distance (sqrt (+ (* (- <creaturePositionX> <entityInMemoryPositionX>) (- <creaturePositionX> <entityInMemoryPositionX>)) (* (- <creaturePositionY> <entityInMemoryPositionY>) (- <creaturePositionY> <entityInMemoryPositionY>)))))
   (<jewel> ^X <entityInMemoryPositionX>)
   (<jewel> ^Y <entityInMemoryPositionY>)
   (<jewel> ^NAME <entityInMemoryName>)
   (<jewel> ^COLOR <entityInMemoryColor>)
   (<o> ^actions.MOVE <command>)
   (<command> ^Vel 1
              ^VelR 1
              ^VelL 1
              ^X <entityInMemoryPositionX>
              ^Y <entityInMemoryPositionY>)
}
   
# Apply*move*jewel:
# If the move operator is selected, then generate an output command to it 
#sp {apply*move*jewel
#   (state <s> ^operator <o>
#              ^io <io>)
#   (<io> ^input-link <il>)           
#   (<io> ^output-link <ol>)
#   (<o> ^name moveJewel)
#   (<o> ^parameter <jewel>)
#   (<jewel> ^X <x>)
#   (<jewel> ^Y <y>)
#   (<jewel> ^NAME <entityInMemoryName>)
#   (<il> ^CREATURE <creature>)
#   (<creature> ^MEMORY <memory>)
#   (<memory> ^ENTITY <entityInMemory>)
#   (<entityInMemory> ^NAME <entityInMemoryName>)
#-->
#   (<ol> ^MOVE <command>)
#   (<command> ^Vel 1)
#   (<command> ^VelR 1)
#   (<command> ^VelL 1)
#   (<command> ^X <x>)
#   (<command> ^Y <y>)
#   #(halt)
#}
#
#  
## Apply*moveJewel*remove-move:
## If the moveJewel operator is selected,
## and there is a completed move command on the output link,
## then remove that command.   
#sp {apply*moveJewel*remove-move
#(state <s> ^operator.name moveJewel
#           ^io.output-link <out>)
#(<out> ^MOVE <move>)
#(<move> ^status complete)
#-->
#(<out> ^MOVE <move> -)}   
#
##Remove the jewel From memory because de jewel is not there 
#sp {apply*moveJewel*remove*jewel
#(state <s> ^operator <o>
#           ^io.input-link <il>)
#(<o> ^name moveJewel)
#(<o> ^parameter <jewel>)
#(<jewel> ^X <x>)
#(<jewel> ^Y <y>)
#(<il> ^CREATURE <creature>)
#(<creature> ^MEMORY <memory>)
#(<memory> ^ENTITY <entityInMemory>) 
#(<memory> ^COUNT <quantity>)
#(<entityInMemory> ^X <x>)
#(<entityInMemory> ^Y <y>)      
#-(<creature> ^SENSOR.VISUAL.ENTITY.X <entityX> <x>)
#-(<creature> ^SENSOR.VISUAL.ENTITY.Y <entityY> <y>)
#-->
#(<memory> ^ENTITY <entityInMemory> -)
#(<memory> ^COUNT <quantity> -
#          ^COUNT (- <quantity> 1))} 
###############  WANDER  ##################
# This operator will make the agent to walk ahead at the enviroment
# Propose*wander:
sp {propose*wander
   (state <s> ^attribute state
              ^impasse no-change                           
              ^superstate <ss>)
   (<ss> ^io.input-link <il>)
   (<ss> ^superstate nil)
   (<il> ^CREATURE <creature>)
   (<creature> ^SENSOR.VISUAL <visual>)
-->
   (<ss> ^operator <o> +)
   (<o> ^name wander
        ^actions.MOVE <command>)
   (<command> ^Vel 0
              ^VelR 2
              ^VelL 0)
              
}
   
## Apply*wander:
## If the wander operator is selected, then generate an output command to it 
#sp {apply*wander
#   (state <s> ^operator <o>
#              ^io <io>)
#   (<io> ^output-link <ol>)
#   (<o> ^name wander)
#-->
#   (<ol> ^MOVE <command>)
#   (<command> ^Vel 0)
#   (<command> ^VelR 2)
#   (<command> ^VelL 0)
#}
#    
## If the wander operator is selected,
## and there is a completed move command on the output link,
## then remove that command.   
#sp {apply*wander*remove*move
#(state <s> ^operator.name wander
#           ^io.output-link <out>)
#(<out> ^MOVE <move>)
#(<move> ^status complete)
#-->
#(<out> ^MOVE <move> -)}   

#SEE AND PROCESS ENTITY

# Move Jewel or Move Food vs See Entity
sp {moveJewel*seeEntity*preferences
   (state <s> ^operator <o> +
                        <o2> +)
   (<o> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
   (<o2> ^name << moveJewel moveFood moveDelivery >>)
-->
   (<s> ^operator <o> > <o2>)}

# See Entity With Memory vs Avoid Brick
sp {avoidBrick*seeEntityWithMemory*preferences
   (state <s> ^operator <o> +
                        <o2> +)
   (<o> ^name avoidBrick)
   (<o2> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
-->
   (<s> ^operator <o> > <o2>)}

# See Ententy Without Memory Prefereences
sp {seeEntity*without*memory*preferences
   (state <s> ^operator <o> +)
   (<o> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
-->
   (<s> ^operator <o> =)}


#JEWEL

# Reject Jewels that are not required for leaflets
sp {moveJewel*reject*no-leaflet-requires-it
   (state <s> ^operator <o> +
              ^io.input-link.CREATURE.LEAFLETS <leaflets>)
   (<o> ^name moveJewel
        ^parameter.COLOR <color>)
   (<leaflets> ^LEAFLET <l1> {<> <l1> <l2>}
               ^LEAFLET <l2> {<> <l2> <l3>}
               ^LEAFLET <l3> {<> <l3> <l1>})
  - {(<l1> ^<color>.MISSING > 0)
     (<l1> ^DELIVERED NO)}
                     - {(<l2> ^<color>.MISSING > 0)
                        (<l2> ^DELIVERED NO)}
                                        - {(<l3> ^<color>.MISSING > 0)
                                           (<l3> ^DELIVERED NO)}
-->
   (<s> ^operator <o> -)
}

# Move Jewel vs Get Jewel
sp {moveJewel*getJewel*preferences
   (state <s> ^operator <o> +
                        <o2> +)
   (<o> ^name getJewel)
   (<o2> ^name << moveJewel moveFood moveDelivery >>)
-->
   (<s> ^operator <o> > <o2>)}

# Get Jewel vs SeeEntity
sp {getJewel*seeEntity*preferences
   (state <s> ^operator <o> +
                        <o2> +)
   (<o> ^name getJewel)
   (<o2> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
-->
   (<s> ^operator <o> > <o2>)}

# Eat Food vs SeeEntity
sp {eatJewel*seeEntity*preferences
   (state <s> ^operator <o> +
                        <o2> +)
   (<o> ^name eatFood)
   (<o2> ^name << seeEntityWithMemoryCount seeEntityWithoutMemoryCount >>)
-->
   (<s> ^operator <o> > <o2>)}


# Get Jewel vs Avoid Brick
sp {getJewel*avoidBrick*preferences
   (state <s> ^operator <o> +
                        <o2> +)
   (<o> ^name getJewel)
   (<o2> ^name avoidBrick)
-->
   (<s> ^operator <o> > <o2>)}

# Move Jewel vs Move Jewel Preferences
sp {moveJewel*moveJewel*less*distance
   (state <s> ^attribute operator
              ^impasse tie
              ^item <o> {<> <o> <o2>}
              ^superstate <ss>)
   (<ss> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<o> ^name moveJewel)
   (<o2> ^name moveJewel)
   (<o2> ^parameter.distance <distance2>)
   (<o>  ^parameter.distance <distance> <= <distance2>)
-->
   (<ss> ^operator <o> > <o2>)}

# Get Jewel vs Get Jewel Preferences
sp {getJewel*getJewel*preferences
   (state <s> ^attribute operator
              ^impasse tie
              ^item <o> {<> <o> <o2>}
              ^superstate <ss>)
   (<o> ^name getJewel)
   (<o2> ^name getJewel)
   (<o2> ^parameter.distance <distance2>)
   (<o>  ^parameter.distance <distance> <= <distance2>)
-->
   (<ss> ^operator <o> > <o2>)}

# FOOD

# Move Food vs Eat Food
sp {moveFood*eatFood*preferences
   (state <s> ^operator <o> +
                        <o2> +)
   (<o> ^name eatFood)
   (<o2> ^name << moveFood moveJewel moveDelivery >>)
-->
   (<s> ^operator <o> > <o2>)}

# Eat Food vs Avoid Brick
sp {eatFood*avoidBrick*preferences
   (state <s> ^operator <o> +
                        <o2> +)
   (<o> ^name eatFood)
   (<o2> ^name avoidBrick)
-->
   (<s> ^operator <o> > <o2>)}

# Move Food vs Move Food Preferences
sp {moveFood*moveFood*preferences
   (state <s> ^attribute operator
              ^impasse tie
              ^item <o> {<> <o> <o2>}
              ^superstate <ss>)
   (<o> ^name moveFood)
   (<o2> ^name moveFood)
   (<o2> ^parameter.distance <distance2>)
   (<o>  ^parameter.distance <distance> <= <distance2>)
-->
   (<ss> ^operator <o> > <o2>)}

# Eat Food vs Eat Food Preferences
sp {eatFood*eatFood*preferences
   (state <s> ^attribute operator
              ^impasse tie
              ^item <o> {<> <o> <o2>}
              ^superstate <ss>)
   (<o> ^name eatFood)
   (<o2> ^name eatFood)
   (<o2> ^parameter.distance <distance2>)
   (<o>  ^parameter.distance <distance> <= <distance2>)
-->
   (<ss> ^operator <o> > <o2>)}

# DELIVERY

sp {seeEntity*without*memory*preferences
   (state <s> ^operator <o> +)
   (<o> ^name moveDelivery)
-->
   (<s> ^operator <o> =)
}

sp {moveCommands*deliverLeaflet*preferences
   (state <s> ^operator <o> +
                        <o2> +)
   (<o> ^name deliverLeaflet)
   (<o2> ^name << moveFood moveJewel moveDelivery >>)
-->
   (<s> ^operator <o> > <o2>)
}

sp {deliverLeaflet*deliverLeaflet*preferences
   (state <s> ^attribute operator
              ^impasse tie
              ^item <o> {<> <o> <o2>}
              ^superstate <ss>)
   (<o> ^name deliverLeaflet)
   (<o2> ^name deliverLeaflet)
   (<o2> ^parameter.SCORE <score2>)
   (<o>  ^parameter.SCORE <score> > <score2>)
-->
   (<ss> ^operator <o> > <o2>)
}

sp {deliverLeaflet*deliverLeaflet*preferences*same-score
   (state <s> ^attribute operator
              ^impasse tie
              ^item <o> {<> <o> <o2>}
              ^superstate <ss>)
   (<o> ^name deliverLeaflet)
   (<o2> ^name deliverLeaflet)
   (<o2> ^parameter.SCORE <score2>)
   (<o>  ^parameter.SCORE <score> = <score2>)
-->
   (<ss> ^operator <o> =)
   (<ss> ^operator <o2> =)
}

sp {deliverLeaflet*avoidBrick*preferences
   (state <s> ^operator <o> +
                        <o2> +)
   (<o> ^name deliverLeaflet)
   (<o2> ^name avoidBrick)
-->
   (<s> ^operator <o> > <o2>)}

# FOOD vs JEWEL or DELIVERY

# Move Food vs Move Jewel Preferences - Move Food Wins
sp {moveFood*moveJewel-delivery*preferences*moveFoodWins
   (state <s> ^attribute operator
              ^impasse tie
              ^item <o> {<> <o> <o2>}
              ^superstate <ss>)
   (<ss> ^io.input-link <il>)
   (<o> ^name moveFood)
   (<o> ^parameterFuel <threshold>)
   (<o2> ^name << moveJewel moveDelivery >>)
   (<il> ^CREATURE.SENSOR.FUEL <fuel>)
   (<fuel> ^VALUE <value> <= <threshold>)
-->
   (<ss> ^operator <o> > <o2>)}

# Move Food vs Move Jewel Preferences - Move Jewel Wins
sp {moveFood*moveJewel-delivery*preferences*moveJewel-delivery-Wins
   (state <s> ^attribute operator
              ^impasse tie
              ^item <o> {<> <o> <o2>}
              ^superstate <ss>)
   (<ss> ^io.input-link <il>)
   (<o> ^name moveFood)
   (<o> ^parameterFuel <threshold>)
   (<o2> ^name << moveJewel moveDelivery >>)
   (<il> ^CREATURE.SENSOR.FUEL <fuel>)
   (<fuel> ^VALUE <value> > <threshold>)
-->
   (<ss> ^operator <o2> > <o>)}

# JEWEL vs DELIVERY

sp {moveJewel*moveDelivery*preferences*
   (state <s> ^operator <o> +
                        <o2> +)
   (<o> ^name moveDelivery)
   (<o2> ^name moveJewel)
-->
   (<s> ^operator <o> > <o2>)}

#BRICK

# Avoid Brick vs Avoid Brick Preferences
sp {avoidBrick*avoidBrick*without*move*jewel*preferences
   (state <s> ^attribute operator
              ^impasse tie
              ^item <o> {<> <o> <o2>}
              ^item-count <itemCount>
              ^superstate <ss>)
   (<o> ^name avoidBrick)
   (<o2> ^name avoidBrick)
   (<o2> ^parameter <distance2>)
   (<o>  ^parameter <distance> <= <distance2>)
-->
   (<ss> ^operator <o> > <o2>)}

# Avoid Brick vs Move Jewel vs Move Food Preferences with element in memory
sp {avoidBrick*moveJewel*moveFood*preferences
   (state <s> ^attribute operator
              ^impasse tie
              ^item <o> {<> <o> <o2>}
              ^item-count <itemCount> 2
              ^superstate <ss>)
   (<o> ^name avoidBrick)
   (<o2> ^name << moveJewel moveFood >>)
   (<o2> ^parameter <entity>)
   (<entity> ^NAME <entityName>)
   (<ss> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<entityInMemory> ^NAME <entityName>)
-->
   (<o> ^entityName <entityName>)
   (<ss> ^operator <o> > <o2>)}

sp {avoidBrick*moveDelivery*moveFood*preferences*avoid-wins
   (state <s> ^attribute operator
              ^impasse tie
              ^item <o> {<> <o> <o2>}
              ^item-count <itemCount> 2
              ^superstate <ss>)
   (<o> ^name avoidBrick)
   (<o2> ^name moveDelivery)
   (<o> ^type BRICK)
   (<o2> ^parameter <entity>)
   (<entity> ^NAME <entityName>)
   (<ss> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<entityInMemory> ^NAME <entityName>)
-->
   (<ss> ^operator <o> > <o2>)}

sp {avoidBrick*moveDelivery*moveFood*preferences*deliver-wins
   (state <s> ^attribute operator
              ^impasse tie
              ^item <o> {<> <o> <o2>}
              ^item-count <itemCount> 2
              ^superstate <ss>)
   (<o> ^name avoidBrick)
   (<o2> ^name moveDelivery)
   (<o> ^type DELIVERY)
   (<o2> ^parameter <entity>)
   (<entity> ^NAME <entityName>)
   (<ss> ^io.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^MEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<entityInMemory> ^NAME <entityName>)
-->
   (<ss> ^operator <o2> > <o>)}

# WANDER

# Wander Preferences
sp {wander*preferences
   (state <s> ^operator <o> +)
   (<o> ^name wander)
-->
   (<s> ^operator <o> <)}

# HALT

sp {halt*condition
   (state <s> ^impasse no-change ^type state -^operator ^attribute operator)
-->
  #(write I2)
  #(halt)
   (interrupt)
}####### APPLY COMMANDS ##########

# Creates the output structures for a operator that creates actions

sp {apply*operator*create-action-command
   (state <s> ^operator <o>
              ^io.output-link <out>)
   (<o> ^actions <act>)
   (<act> ^<att> <value>)
-->
   (<out> ^<att> <value2>)}

sp {elaborate*action*create-action-atributes
   (state <s> ^operator <o>
              ^io.output-link <out>)
   (<o> ^actions <act>)
   (<act> ^<att> <value>)
   (<value> ^<att2> <value2>)
   (<out> ^<att> <value3>)
-->
   (<value3> ^<att2> <value2>)}

sp {apply*operator*remove-command
   (state <s> ^operator.actions
              ^io.output-link <out>)
   (<out> ^<att> <value>)
   (<value> ^status complete)
-->
   (<out> ^<att> <value> -)}
